# This workflow is modified from Reth:
# https://github.com/paradigmxyz/reth/blob/main/.github/workflows/release.yml

name: release

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Enable dry run mode (builds artifacts but skips uploads and release creation)"
        type: boolean
        default: false

env:
  REPO_NAME: ${{ github.repository_owner }}/bera-reth
  IMAGE_NAME: ${{ github.repository_owner }}/bera-reth
  CARGO_TERM_COLOR: always
  DOCKER_IMAGE_NAME_URL: https://ghcr.io/${{ github.repository_owner }}/bera-reth

jobs:
  dry-run:
    name: check dry run
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Dry run value: ${{ github.event.inputs.dry_run }}"
          echo "Dry run enabled: ${{ github.event.inputs.dry_run == 'true'}}"
          echo "Dry run disabled: ${{ github.event.inputs.dry_run != 'true'}}"

  extract-version:
    name: extract version
    runs-on: ubuntu-latest
    steps:
      - name: Extract version
        run: echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        id: extract_version
    outputs:
      VERSION: ${{ steps.extract_version.outputs.VERSION }}

  check-version:
    name: check version
    runs-on: ubuntu-latest
    needs: extract-version
    if: ${{ github.event.inputs.dry_run != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Verify crate version matches tag
        # Check that the Cargo version starts with the tag,
        # so that Cargo version 1.4.8 can be matched against both v1.4.8 and v1.4.8-rc.1
        run: |
          tag="${{ needs.extract-version.outputs.VERSION }}"
          tag=${tag#v}
          cargo_ver=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          [[ "$tag" == "$cargo_ver"* ]] || { echo "Tag $tag doesn't match the Cargo version $cargo_ver"; exit 1; }

  build:
    name: build release
    runs-on: ${{ matrix.configs.os }}
    needs: extract-version
    continue-on-error: ${{ matrix.configs.allow_fail }}
    strategy:
      fail-fast: true
      matrix:
        configs:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
            profile: maxperf
            allow_fail: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04
            profile: maxperf
            allow_fail: false
    steps:
      - uses: actions/checkout@v4
      - uses: rui314/setup-mold@v1
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.configs.target }}
      - name: Install cross main
        id: cross_main
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true



      - name: Build Bera-Reth
        run: make PROFILE=${{ matrix.configs.profile }} build-${{ matrix.configs.target }}
      - name: Move binary
        run: |
          mkdir artifacts
          [[ "${{ matrix.configs.target }}" == *windows* ]] && ext=".exe"
          mv "target/${{ matrix.configs.target }}/${{ matrix.configs.profile }}/bera-reth${ext}" ./artifacts

      - name: Configure GPG and create artifacts
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          export GPG_TTY=$(tty)
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --batch --import
          cd artifacts
          tar -czf bera-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz bera-reth*
          echo "$GPG_PASSPHRASE" | gpg --passphrase-fd 0 --pinentry-mode loopback --batch -ab bera-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz
          mv *tar.gz* ..
        shell: bash

      - name: Upload artifact
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: bera-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz
          path: bera-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz

      - name: Upload signature
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: bera-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz.asc
          path: bera-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz.asc

  draft-release:
    name: draft release
    runs-on: ubuntu-latest
    needs: [build, extract-version]
    if: ${{ github.event.inputs.dry_run != 'true' }}
    env:
      VERSION: ${{ needs.extract-version.outputs.VERSION }}
    permissions:
      # Required to post the release
      contents: write
    steps:
      # This is necessary for generating the changelog.
      # It has to come before "Download Artifacts" or else it deletes the artifacts.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bera-reth-*
          merge-multiple: true
      - name: Generate full changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 ${{ env.VERSION }}^)..${{ env.VERSION }})" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Create release draft
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prerelease_flag=""
          if [[ "${GITHUB_REF}" == *-rc* ]]; then
            prerelease_flag="--prerelease"
          fi

          body=$(cat <<- "ENDBODY"
          ![image](https://raw.githubusercontent.com/${{ env.GITHUB_USER }}/bera-reth/main/assets/bera-reth.png)

          ## Testing Checklist (DELETE ME)

          - [ ] Run on testnet for 1-3 days.
          - [ ] Resync a mainnet node.
          - [ ] Ensure all CI checks pass.

          ## Release Checklist (DELETE ME)

          - [ ] Ensure all crates have had their versions bumped.
          - [ ] Write the summary.
          - [ ] Fill out the update priority.
          - [ ] Ensure all binaries have been added.
          - [ ] Prepare release posts (Twitter, ...).

          ## Summary

          Add a summary, including:

          - Critical bug fixes
          - New features
          - Any breaking changes (and what to expect)

          ## Update Priority

          This table provides priorities for which classes of users should update particular components.

          | User Class           | Priority        |
          |----------------------|-----------------|
          | Payload Builders     | <TODO> |
          | Non-Payload Builders | <TODO>    |

          ## All Changes

          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Binaries

          The binaries are signed with the PGP key: `9242 626B 8926 378A EA33 82A7 11BD B71D C9ED AE7B`

          ### Bera-Reth

          | System | Architecture | Binary | PGP Signature |
          |:---:|:---:|:---:|:---|
          | <img src="https://www.svgrepo.com/download/473700/linux.svg" width="50"/> | x86_64 | [bera-reth-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/bera-reth-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/bera-reth-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz.asc) |
          | <img src="https://www.svgrepo.com/download/473700/linux.svg" width="50"/> | aarch64 | [bera-reth-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/bera-reth-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/bera-reth-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz.asc) |
          | <img src="https://www.svgrepo.com/download/473589/docker.svg" width="50"/> | Docker | [${{ env.IMAGE_NAME }}](${{ env.DOCKER_IMAGE_NAME_URL }}) | - |
          ENDBODY
          )
          assets=()
          for asset in ./*bera-reth-*.tar.gz*; do
              if [[ -f "$asset" ]]; then
                  assets+=("$asset")
              fi
          done
          
          # Ensure we have assets before proceeding
          if [[ ${#assets[@]} -eq 0 ]]; then
              echo "ERROR: No assets found!"
              exit 1
          fi
          
          echo "Found ${#assets[@]} assets to upload"
          tag_name="${{ env.VERSION }}"
          
          # Extensive debugging
          echo "=== DEBUG INFO ==="
          echo "GITHUB_REF: '$GITHUB_REF'"
          echo "GITHUB_REF_NAME: '$GITHUB_REF_NAME'"
          echo "VERSION env var: '$VERSION'"
          echo "tag_name variable: '$tag_name'"
          echo "prerelease_flag: '$prerelease_flag'"
          echo "Current directory: $(pwd)"
          echo "Git status:"
          git status --porcelain || echo "Git status failed"
          echo "Git log (last commit):"
          git log --oneline -1 || echo "Git log failed"
          echo "Available tags:"
          git tag -l | tail -5 || echo "No tags found"
          echo "Current HEAD:"
          git rev-parse HEAD || echo "Git rev-parse failed"
          echo "Tag $tag_name exists?"
          if git rev-parse "$tag_name" >/dev/null 2>&1; then
              echo "YES - Tag $tag_name exists at: $(git rev-parse $tag_name)"
          else
              echo "NO - Tag $tag_name does not exist"
              echo "Creating tag $tag_name..."
              git tag "$tag_name"
              git push origin "$tag_name"
              echo "Tag created and pushed"
          fi
          
          echo "Assets found: ${#assets[@]}"
          for i in "${!assets[@]}"; do
              echo "Asset $i: '${assets[i]}' (size: $(stat -c%s "${assets[i]}" 2>/dev/null || echo "unknown"))"
          done
          
          echo "Environment variables:"
          env | grep -E "(GITHUB_|GH_)" | sort
          
          echo "GitHub CLI version:"
          gh --version
          
          echo "Testing gh auth:"
          gh auth status || echo "Auth check failed"
          
          echo "=== RUNNING RELEASE COMMAND ==="
          echo "Command: gh release create --draft $prerelease_flag -t \"Bera-Reth $tag_name\" -F \"-\" \"$tag_name\" ${assets[*]}"
          
          # Create release with verbose output
          set -x  # Enable bash debug mode
          echo "$body" | gh release create --draft $prerelease_flag -t "Bera-Reth $tag_name" -F "-" "$tag_name" "${assets[@]}"
          release_exit_code=$?
          set +x  # Disable bash debug mode
          
          echo "=== POST-RELEASE DEBUG ==="
          echo "Release command exit code: $release_exit_code"
          
          if [[ $release_exit_code -eq 0 ]]; then
              echo "Release created successfully"
              echo "Checking if release exists:"
              gh release view "$tag_name" || echo "Release view failed"
          else
              echo "Release creation failed with exit code: $release_exit_code"
              exit $release_exit_code
          fi

  dry-run-summary:
    name: dry run summary
    runs-on: ubuntu-latest
    needs: [build, extract-version]
    if: ${{ github.event.inputs.dry_run == 'true' }}
    env:
      VERSION: ${{ needs.extract-version.outputs.VERSION }}
    steps:
      - name: Summarize dry run
        run: |
          echo "## 🧪 Release Dry Run Summary"
          echo ""
          echo "✅ Successfully completed dry run for commit ${{ github.sha }}"
          echo ""
          echo "### What would happen in a real release:"
          echo "- Binary artifacts would be uploaded to GitHub"
          echo "- Docker images would be pushed to registry"
          echo "- A draft release would be created"
          echo ""
          echo "### Next Steps"
          echo "To perform a real release, push a git tag."
